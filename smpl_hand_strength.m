function strength = smpl_hand_strength(hand, table)
if isempty(table)
    ccards = char(hand);
    ccard_values = ccards(:,2);
    card_values = zeros(1,2);
    
    for i = 1:length(ccard_values)
        cval = ccard_values(i);
        if cval == 'a'
            card_values(i) = 14;
        elseif cval == 'k'
            card_values(i) = 13;
        elseif cval == 'q'
            card_values(i) = 12;
        elseif cval == 'j'
            card_values(i) = 11;
        elseif cval == 't'
            card_values(i) = 10;
        else
            card_values(i) = str2double(ccard_values(i));
        end
    end
    twoCardValues = [ ...
        6	4	4	5	4	4	4	5	6	7	7	9	11; ...
        1	7	5	6	5	5	5	5	6	7	8	9	11; ...
        2	3	9	7	6	6	6	6	7	7	8	9	12; ...
        2	3	4	10	7	7	7	7	7	8	9	10	12; ...
        2	3	4	5	12	8	8	8	8	8	9	10	12; ...
        1	2	4	5	6	14	9	9	9	9	10	11	12; ...
        2	2	3	4	6	7	16	10	10	1	11	11	13; ...
        3	3	3	4	6	7	8	18	12	12	12	13	14; ...
        3	4	4	4	6	7	8	10	20	13	14	14	15; ...
        4	4	5	5	6	7	8	10	11	23	14	15	16; ...
        5	5	6	6	7	7	9	10	12	13	25	16	17; ...
        6	7	7	8	8	9	9	11	12	13	14	28	18; ...
        8	9	9	10	9	10	11	12	13	14	15	16	32;];
    
    card_colors = ccards(:,3);
    theprint(['Cards: ', '[',ccards(1,2:3),'] [' ,ccards(2,2:3),']']);
    if card_colors(1) == card_colors(2);
        strength = twoCardValues(min(card_values) - 1, max(card_values) - 1)/32;
        return
    end
    strength = twoCardValues(max(card_values) - 1, min(card_values) - 1)/32;
    return
end

eval = evaluate_hand([hand table]);

%cumulative_ods is the probability of getting at least the index as hand
%strenght. For example, straight has strength 4 so the probability of
%having something better than straight is cumulative_ods(5) (the probbility
%of having flush or better)
if length(table) == 3
    cumulative_ods = [ ... 
        0.00001554 ...
        0.00025564 ...
        0.00169622 ...
        0.00366162 ...
        0.00758627 ...
        0.02871472 ...
        0.07625374 ...
        0.49882277];
elseif length(table) == 4
    cumulative_ods = [ ... 
        0.00009  ...
        0.00081  ...
        0.008963 ...
        0.019071 ...
        0.036834 ...
        0.072797 ...
        0.97208 ...
        0.675177];
elseif length(table) == 5
    cumulative_ods = [ ... 
        0.00031083 ...
        0.0019915  ...
        0.02795252 ...
        0.05820746 ...
        0.10440128 ...
        0.15269998 ...
        0.38765534 ...
        0.8258808];
end
cumulative_ods = [1 fliplr(cumulative_ods) 0];

p_gets_beaten = cumulative_ods(eval.value + 2);

%we also need to add the probability of hvng a better hand of the same type

%distinct_hands is the number of possible hands for each type of hand
%including high card (not having a pair or better).
%No kickers are considered here. That is: only the most significant card is
%considered.
%                  0   1   2   3   4   5   6   7   8
distinct_hands = [ 8, 13, 12, 13, 10,  8, 12, 13, 10];

msc = eval.hand(1);
better_of_same = 13 - (msc-1);
p_same = cumulative_ods(eval.value+1) - cumulative_ods(eval.value+2);
p_better_of_same = p_same * (better_of_same / distinct_hands(eval.value+1));
p_gets_beaten = p_gets_beaten + p_better_of_same;

strength = 1 - p_gets_beaten;

end